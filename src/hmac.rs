use xor::xor;

/// HMAC (hash-based message authentication code) were made against length extension attacks.
pub fn hmac(key: &[u8], msg: &[u8], hash: fn(input: &[u8]) -> Vec<u8>, blk_size: usize) -> Vec<u8> {
    let mut k = key.to_vec();

    if key.len() > blk_size {
        k = hash(key)
    }

    if key.len() < blk_size {
        k = zero_pad(key, blk_size);
    }

    let o_key_pad = xor(&k, &vec![0x5c; blk_size]);
    let i_key_pad = xor(&k, &vec![0x36; blk_size]);

    let h1 = hash(&[&i_key_pad, msg].concat());
    hash(&[o_key_pad, h1].concat())
}

fn zero_pad(input: &[u8], blk_size: usize) -> Vec<u8> {
    let pad_len = blk_size - (input.len() % blk_size);
    let pad = vec![0u8; pad_len];
    [input.to_vec(), pad].concat()
}

#[cfg(test)]
pub mod tests {
    use hmac::*;
    use md4::md4;
    use sha::sha1;

    #[test]
    fn test_hmac() {
        assert_eq!(
            hmac(
                b"key",
                b"The quick brown fox jumps over the lazy dog",
                sha1,
                64
            ),
            b"\xde\x7c\x9b\x85\xb8\xb7\x8a\xa6\xbc\x8a\x7a\x36\xf7\x0a\x90\x70\x1c\x9d\xb4\xd9"
        );

        // Test vectors from https://www.nco.ncep.noaa.gov/pmb/codes/nwprod/decoders/decod_shared/lib/polarssl/tests/suites/test_suite_md.data
        assert_eq!(
            hmac(
                b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f",
                b"\x53\x61\x6d\x70\x6c\x65\x20\x23\x31",
                sha1,
                64
            ),
            b"\x4f\x4c\xa3\xd5\xd6\x8b\xa7\xcc\x0a\x12\x08\xc9\xc6\x1e\x9c\x5d\xa0\x40\x3c\x0a"
        );

        assert_eq!(
            hmac(
                b"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43",
                b"\x53\x61\x6d\x70\x6c\x65\x20\x23\x32",
                sha1,
                64
            ),
            b"\x09\x22\xd3\x40\x5f\xaa\x3d\x19\x4f\x82\xa4\x58\x30\x73\x7d\x5c\xc6\xc7\x5d\x24"
        );

        assert_eq!(
            &hmac(
                b"\x7b\x10\xf4\x12\x4b\x15\xc8\x2e",
                b"\x27\xdc\xb5\xb1\xda\xf6\x0c\xfd\x3e\x2f\x73\xd4\xd6\x4c\xa9\xc6\x84\xf8\xbf\x71\xfc\x68\x2a\x46\x79\x3b\x17\x90\xaf\xa4\xfe\xb1\x00\xca\x7a\xaf\xf2\x6f\x58\xf0\xe1\xd0\xed\x42\xf1\xcd\xad\x1f\x47\x4a\xfa\x2e\x79\xd5\x3a\x0c\x42\x89\x2c\x4d\x7b\x32\x7c\xbe\x46\xb2\x95\xed\x8d\xa3\xb6\xec\xab\x3d\x48\x51\x68\x7a\x6f\x81\x2b\x79\xdf\x2f\x6b\x20\xf1\x1f\x67\x06\xf5\x30\x17\x90\xca\x99\x62\x5a\xad\x73\x91\xd8\x4f\x78\x04\x3d\x2a\x0a\x23\x9b\x14\x77\x98\x4c\x15\x7b\xbc\x92\x76\x06\x4e\x7a\x1a\x40\x6b\x06\x12\xca",
                sha1,
                64
            )[..10],
            b"\x4e\xad\x12\xc2\xfe\x3d\x6e\xa4\x3a\xcb"
        );

        assert_eq!(
            hmac(
                b"aaaaaaaaaaaaaaaa",
                b"\xb9\x1c\xe5\xac\x77\xd3\x3c\x23\x4e\x61\x00\x2e\xd6",
                md4,
                64,
            ),
            b"\xea\xbd\x0f\xbe\xfb\x82\xfb\x00\x63\xa2\x5a\x6d\x7b\x8b\xdc\x0f"
        );

        assert_eq!(
            hmac(
                b"aaaaaaaaaaaaaaaa",
                b"\x27\x0f\xcf\x11\xf2\x7c\x27\x44\x84\x57\xd7\x04\x9a\x7e\xdb\x08\x4a\x3e\x55\x4e\x0b\x2a\xcf\x58\x06\x98\x22\x13\xf0\xad\x51\x64\x02\xe4\xc8\x69\xc4\xff\x21\x71\xe1\x8e\x34\x89\xba\xa3\x12\x5d\x2c\x30\x56\xeb\xb6\x16\x29\x6f\x9b\x6a\xa9\x7e\xf6\x8e\xea\xbc\xdc\x0b\x6d\xde\x47\x77\x50\x04\x09\x6a\x24\x1e\xfc\xf0\xa9\x0d\x19\xb3\x4e\x89\x8c\xc7\x34\x0c\xdc\x94\x0f\x8b\xdd\x46\xe2\x3e\x35\x2f\x34\xbc\xa1\x31\xd4\xd6\x7a\x7c\x2d\xdb\x8d\x0d\x68\xb6\x7f\x06\x15\x2a\x12\x81\x68\xe1\xc3\x41\xc3\x7e\x0a\x66\xc5\x01\x89\x99\xb7\x05\x9b\xcc\x30\x0b\xee\xd2\xc1\x9d\xd1\x15\x2d\x2f\xe0\x62\x85\x32\x93\xb8\xf3\xc8\xb5",
                md4,
                64,
            ),
            b"\xce\xc3\xc5\xe4\x21\xa7\xb7\x83\xaa\x89\xca\xcf\x78\xda\xf6\xdc"
        );
    }
}
